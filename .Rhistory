##
grid <- sf::st_make_grid(sppolygon,
cellsize = c(cellsize, cellsize),
what = "centers") %>%
sf::st_as_sf() %>%
st_intersection(sppolygon) |>
# dplyr::filter(sf::st_contains(sppolygon,
#                               .,
#                               sparse = FALSE)) %>%
cbind(., sf::st_coordinates(.)) %>%
dplyr::rename("geometry"="x")
##
grid <- sf::st_make_grid(sppolygon,
cellsize = c(cellsize, cellsize),
what = "centers") %>%
sf::st_as_sf() %>%
st_intersection(sppolygon) %>%
# dplyr::filter(sf::st_contains(sppolygon,
#                               .,
#                               sparse = FALSE)) %>%
cbind(., sf::st_coordinates(.)) %>%
dplyr::rename("geometry"="x")
grid
# Inverse Distance Weighting (IDW)
fit_gstat <- gstat::gstat(
formula = depth ~ 1,
data = as(depths, "Spatial"),
nmax = 10, nmin = 3,
set = list(idp = 0.5)
)
grid$IDW <- stats::predict(fit_gstat, newdata = as(grid, "Spatial")) %>%
sf::st_as_sf() %>%
dplyr::pull(1)
# Thin Plate Regression Spline (TPRS)
fit_gam_reml <- mgcv::gam(depth ~ s(X, Y, k = 60), data = depths, method = "REML")
grid$TPRS <- stats::predict(fit_gam_reml, newdata = grid, type = "response")
## Soap Film Smooth
boundary_coords <- sf::st_coordinates(sppolygon)
gam_bound  <- list(
list(
X = boundary_coords[-1, "X"],
Y = boundary_coords[-1, "Y"],
f = rep(0, nrow(boundary_coords))
)
)
knot_points <- sf::st_make_grid(
sppolygon,
n = c(10, 10),
what = "centers"
) %>%
sf::st_as_sf() %>%
dplyr::filter(sf::st_contains(sppolygon, x, sparse = FALSE)) %>%
dplyr::filter(
!sf::st_intersects(
sppolygon %>% sf::st_cast("LINESTRING") %>% sf::st_buffer(10),
x,
sparse = FALSE
)
) %>%
cbind(., sf::st_coordinates(.))
fit_gam_soap <- mgcv::gam(
depth ~ s(X, Y, bs = "so", xt = list(bnd = gam_bound)),
data = depths %>%
dplyr::filter(source == "measured") %>%
dplyr::filter(sf::st_contains(sppolygon, geometry, sparse = FALSE)),
method = "REML",
knots = knot_points
)
grid$GAM_Soap <- stats::predict(fit_gam_soap, newdata = grid, type = "response")
grid
# Inverse Distance Weighting (IDW)
fit_gstat <- gstat::gstat(
formula = depth ~ 1,
data = as(depths, "Spatial"),
nmax = 10, nmin = 3,
set = list(idp = 0.5)
)
grid$IDW <- stats::predict(fit_gstat, newdata = as(grid, "Spatial")) %>%
sf::st_as_sf() %>%
dplyr::pull(1)
# Thin Plate Regression Spline (TPRS)
fit_gam_reml <- mgcv::gam(depth ~ s(X, Y, k = 60), data = depths, method = "REML")
grid$TPRS <- stats::predict(fit_gam_reml, newdata = grid, type = "response")
## Soap Film Smooth
boundary_coords <- sf::st_coordinates(sppolygon)
gam_bound  <- list(
list(
X = boundary_coords[-1, "X"],
Y = boundary_coords[-1, "Y"],
f = rep(0, nrow(boundary_coords))
)
)
knot_points <- sf::st_make_grid(
sppolygon,
n = c(10, 10),
what = "centers"
) %>%
sf::st_as_sf() %>%
dplyr::filter(sf::st_contains(sppolygon, x, sparse = FALSE)) %>%
dplyr::filter(
!sf::st_intersects(
sppolygon %>% sf::st_cast("LINESTRING") %>% sf::st_buffer(10),
x,
sparse = FALSE
)
) %>%
cbind(., sf::st_coordinates(.))
knot_points <- sf::st_make_grid(
sppolygon,
n = c(10, 10),
what = "centers"
) %>%
sf::st_as_sf() %>%
st_intersection(sppolygon) %>%
# dplyr::filter(sf::st_contains(sppolygon, x, sparse = FALSE)) %>%
dplyr::filter(
!sf::st_intersects(
sppolygon %>% sf::st_cast("LINESTRING") %>% sf::st_buffer(10),
x,
sparse = FALSE
)
) %>%
cbind(., sf::st_coordinates(.))
sf::st_make_grid(
sppolygon,
n = c(10, 10),
what = "centers"
) %>%
sf::st_as_sf()
sf::st_make_grid(
sppolygon,
n = c(10, 10),
what = "centers"
) %>%
sf::st_as_sf() %>%
st_intersection(sppolygon)
sf::st_make_grid(
sppolygon,
n = c(10, 10),
what = "centers"
) %>%
sf::st_as_sf() %>%
st_intersection(sppolygon) %>%
# dplyr::filter(sf::st_contains(sppolygon, x, sparse = FALSE)) %>%
dplyr::filter(
!sf::st_intersects(
sppolygon %>% sf::st_cast("LINESTRING") %>% sf::st_buffer(10),
x,
sparse = FALSE
)
)
sppolygon %>% sf::st_cast("LINESTRING") %>% sf::st_buffer(10)
?st_intersection
knot_points <- sf::st_make_grid(
sppolygon,
n = c(10, 10),
what = "centers"
) %>%
sf::st_as_sf() %>%
st_intersection(sppolygon) %>%
# dplyr::filter(sf::st_contains(sppolygon, x, sparse = FALSE)) %>%
st_difference(sppolygon %>% sf::st_cast("LINESTRING") %>% sf::st_buffer(10))
knot_points
knot_points <- sf::st_make_grid(
sppolygon,
n = c(10, 10),
what = "centers"
) %>%
sf::st_as_sf() %>%
st_intersection(sppolygon)
knot_points
knot_points <- sf::st_make_grid(
sppolygon,
n = c(10, 10),
what = "centers"
) %>%
sf::st_as_sf() %>%
st_intersection(sppolygon) %>%
# dplyr::filter(sf::st_contains(sppolygon, x, sparse = FALSE)) %>%
st_difference(sppolygon %>% sf::st_cast("LINESTRING") %>% sf::st_buffer(10)) %>%
# dplyr::filter(
#   !sf::st_intersects(
#     sppolygon %>% sf::st_cast("LINESTRING") %>% sf::st_buffer(10),
#     x,
#     sparse = FALSE
#   )
# ) %>%
cbind(., sf::st_coordinates(.))
fit_gam_soap <- mgcv::gam(
depth ~ s(X, Y, bs = "so", xt = list(bnd = gam_bound)),
data = depths %>%
dplyr::filter(source == "measured") %>%
st_intersection(sppolygon),
# dplyr::filter(sf::st_contains(sppolygon, geometry, sparse = FALSE)),
method = "REML",
knots = knot_points
)
grid$GAM_Soap <- stats::predict(fit_gam_soap, newdata = grid, type = "response")
##
##
grid_nested <- grid %>%
sf::st_drop_geometry() %>%
tidyr::pivot_longer(c("IDW","TPRS","GAM_Soap")) %>%
dplyr::group_by(name) %>%
tidyr::nest() %>%
dplyr::mutate(depth_raster_output=purrr::map(data,rasterizeptsbathy))
diff <- NULL
for(i in grid_nested$name){
depth_raster <- grid_nested %>% dplyr::filter(name==i) %>% dplyr::pull(depth_raster_output)
diff <- c(diff,diffrasterpts(depth_raster[[1]] , pts_bathy))
}
names(diff) <- grid_nested$name
best_select <- which.min(diff)
best_select
##
best_grid <- grid_nested$data[[3]] %>%
sf::st_as_sf(coords=c("X","Y"),crs=2154) %>%
cbind(., sf::st_coordinates(.))
best_grid
library(lakemetrics)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
data(lac)
baseline <- linemax_lake(lac)
transects <- transects_ibml(lac,baseline)
graph <- ggplot(data=lac)+
geom_sf(fill="lightblue")+
geom_sf(data=transects,aes(col=classe))+
#ggsn::north(data=lac, location = "bottomright", symbol = 15)
theme(legend.position = "bottom")
print(graph)
bathymetry_lake(lac,bathy)
grid_nested
bathymetry_lake(lac,bathy)->A
A
A |> ggplot()+geom_sf(aes(value))
A |> ggplot()+geom_sf(aes(col=value))
library(lakemetrics)
data(lac)
baseline <- linemax_lake(lac)
transects <- transects_ibml(lac,baseline)
transects
library(ggplot2)
import(ggplot2)
use_package('ggplot2')
devtools::use_package('ggplot2')
??use_package
usethis::use_package("ggplot2")
usethis::use_package("gt")
pkgdown::build_site()
pkgdown::build_site()
usethis::use_package("ggsn")
f (! class(sppolygon)[1] %in% c("sfc_POLYGON","sf") ) {
sppolygon<-lac
# for a point in the base line
tibble_perpendiculars <- points_linemax(linemax, distance)
# for a point in the base line
tibble_perpendiculars <- points_linemax(linemax, distance)
# perpendiculars_tibble <- tibble_perpendiculars  %>%
#   as_tibble() %>%
#   rowwise() %>%
#   # group_by(id) %>%
#   # nest() %>%
#   mutate(data_line_perpendicular = map2(X,Y,
#     lineperdendicular))
# data_line_perpendicular <- perpendiculars_tibble$data_line_perpendicular
data_line_perpendicular <- list()
for (i in 1:nrow(tibble_perpendiculars)) {
data_line_perpendicular[[i]] <- lineperdendicular(sppolygon,
linemax,
tibble_perpendiculars$X[i],
tibble_perpendiculars$Y[i])
}
##
# linemax <- linemax_lake(sppolygon)
plan_eau <- sppolygon
plan_eau_select <- class_lakes(sppolygon) %>%
dplyr::filter(selection == 1)
# for a point in the base line
tibble_perpendiculars <- points_linemax(linemax, distance)
# perpendiculars_tibble <- tibble_perpendiculars  %>%
#   as_tibble() %>%
#   rowwise() %>%
#   # group_by(id) %>%
#   # nest() %>%
#   mutate(data_line_perpendicular = map2(X,Y,
#     lineperdendicular))
# data_line_perpendicular <- perpendiculars_tibble$data_line_perpendicular
data_line_perpendicular <- list()
sppolygon
?st_simplify()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
transects |> filter(classe=="transects") |> st_intersection(lac |> st_cast("MULTILINESTRING"))
data(lac)
baseline <- linemax_lake(lac)
library(lakemetrics)
data(lac)
baseline <- linemax_lake(lac)
transects <- transects_ibml(lac,baseline)
graph <- ggplot(data=lac)+
geom_sf(fill="lightblue")+
geom_sf(data=transects,aes(col=classe))+
#ggsn::north(data=lac, location = "bottomright", symbol = 15)
theme(legend.position = "bottom")
require(ggplot2)
# library(kableExtra)
library(gt)
require(magrittr)
require(ggsn)
require(lakemetrics)
data(lac)
baseline <- linemax_lake(lac)
transects <- transects_ibml(lac,baseline)
graph <- ggplot(data=lac)+
geom_sf(fill="lightblue")+
geom_sf(data=transects,aes(col=classe))+
#ggsn::north(data=lac, location = "bottomright", symbol = 15)
theme(legend.position = "bottom")
print(graph)
transects |>
filter(classe=="transects") |>
st_intersection(lac |> st_cast("MULTILINESTRING"))
transects |>
filter(classe=="transects") |>
sf::st_intersection(lac |> st_cast("MULTILINESTRING"))
transects
transects |>
filter(classe=="transects") |>
sf::st_intersection(lac |> sf::st_cast("MULTILINESTRING"))
lac
transects |>
filter(classe=="transects") |>
sf::st_intersection(lac |>
sf::st_cast("LINESTRING"))
lac |>
sf::st_cast("LINESTRING")
lac |>
sf::st_cast("MULTILINESTRING")
transects |>
filter(classe=="transects")
transects |>
filter(classe %in% "transects")
transects
transects |>
filter(classe %in% "transects")
transects |>
dplyr::filter(classe %in% "transects")
transects |>
dplyr::filter(classe %in% "transects") |>
sf::st_intersection(lac |>
sf::st_cast("MULTILINESTRING"))
transects
lac
transects |>
dplyr::filter(classe %in% "transects") |>
sf::st_intersection(lac |>
st_transform(2154) |>
sf::st_cast("MULTILINESTRING"))
transects |>
dplyr::filter(classe %in% "transects") |>
sf::st_intersection(lac |>
sf::st_transform(2154) |>
sf::st_cast("MULTILINESTRING"))
transects |>
dplyr::filter(classe %in% "transects") |>
sf::st_intersects(lac |>
sf::st_transform(2154) |>
sf::st_cast("MULTILINESTRING"))
transects |>
dplyr::filter(classe %in% "transects") |>
sf::st_buffer(dist = 5) |>
sf::st_intersection(lac |>
sf::st_transform(2154) |>
sf::st_cast("MULTILINESTRING"))
transects |>
dplyr::filter(classe %in% "transects") |>
sf::st_buffer(dist = 10) |>
sf::st_intersection(lac |>
sf::st_transform(2154) |>
sf::st_cast("MULTILINESTRING"))
?st_buffer
transects |>
dplyr::filter(classe %in% "transects") |>
sf::st_intersection(lac |>
sf::st_transform(2154) |>
sf::st_cast("MULTILINESTRING") |>
st_buffer(dist=10))
transects |>
dplyr::filter(classe %in% "transects") |>
sf::st_intersection(lac |>
sf::st_transform(2154) |>
sf::st_cast("MULTILINESTRING") |>
sf::st_buffer(dist=10))
transects |>
dplyr::filter(classe %in% "transects") |>
sf::st_buffer(dist=20) |>
sf::st_cast("MULTILINESTRING") |>
sf::st_intersection(lac |>
sf::st_transform(2154) |>
sf::st_cast("MULTILINESTRING"))
transects |>
dplyr::filter(classe %in% "transects") |>
sf::st_buffer(dist=20) |>
sf::st_cast("MULTILINESTRING") |>
sf::st_intersection(lac |>
sf::st_transform(2154) |>
sf::st_cast("MULTILINESTRING")) |>
sf::st_cast("POINT")
transects |>
dplyr::filter(classe %in% "transects") |>
# sf::st_buffer(dist=20) |>
sf::st_cast("MULTILINESTRING") |>
sf::st_intersection(lac |>
sf::st_transform(2154) |>
sf::st_cast("MULTILINESTRING")) |>
sf::st_cast("POINT")
transects |>
dplyr::filter(classe %in% "transects") |>
sf::st_buffer(dist=5) |>
sf::st_cast("MULTILINESTRING") |>
sf::st_intersection(lac |>
sf::st_transform(2154) |>
sf::st_cast("MULTILINESTRING")) |>
sf::st_cast("POINT")
transects |>
dplyr::filter(classe %in% "transects") |>
sf::st_buffer(dist=5) |>
sf::st_cast("MULTILINESTRING") |>
sf::st_intersection(lac |>
sf::st_transform(2154) |>
sf::st_cast("MULTILINESTRING")) |>
sf::st_cast("POINT") |>
ggplot()+
geom_sf()
transects |>
dplyr::filter(classe %in% "transects") |>
sf::st_buffer(dist=2) |>
sf::st_cast("MULTILINESTRING") |>
sf::st_intersection(lac |>
sf::st_transform(2154) |>
sf::st_cast("MULTILINESTRING")) |>
sf::st_cast("POINT") |>
ggplot()+
geom_sf()
transects |>
dplyr::filter(classe %in% "transects") |>
sf::st_buffer(dist=1) |>
sf::st_cast("MULTILINESTRING") |>
sf::st_intersection(lac |>
sf::st_transform(2154) |>
sf::st_cast("MULTILINESTRING")) |>
sf::st_cast("POINT") |>
ggplot()+
geom_sf()
transects |>
dplyr::filter(classe %in% "transects") |>
# sf::st_buffer(dist=1) |>
sf::st_cast("MULTILINESTRING") |>
sf::st_intersection(lac |>
sf::st_transform(2154) |>
sf::st_cast("MULTILINESTRING")) |>
sf::st_cast("POINT") |>
ggplot()+
geom_sf()
transects |>
dplyr::filter(classe %in% "transects") |>
sf::st_buffer(dist=0.5) |>
sf::st_cast("MULTILINESTRING") |>
sf::st_intersection(lac |>
sf::st_transform(2154) |>
sf::st_cast("MULTILINESTRING")) |>
sf::st_cast("POINT") |>
ggplot()+
geom_sf()
transects |>
dplyr::filter(classe %in% "transects") |>
sf::st_buffer(dist=0.1) |>
sf::st_cast("MULTILINESTRING") |>
sf::st_intersection(lac |>
sf::st_transform(2154) |>
sf::st_cast("MULTILINESTRING")) |>
sf::st_cast("POINT") |>
ggplot()+
geom_sf()
transects |>
dplyr::filter(classe %in% "transects") |>
sf::st_buffer(dist=0.01) |>
sf::st_cast("MULTILINESTRING") |>
sf::st_intersection(lac |>
sf::st_transform(2154) |>
sf::st_cast("MULTILINESTRING")) |>
sf::st_cast("POINT") |>
ggplot()+
geom_sf()
transects |>
dplyr::filter(classe %in% "transects") |>
sf::st_buffer(dist=0.01) |>
sf::st_cast("MULTILINESTRING") |>
sf::st_intersection(lac |>
sf::st_transform(2154) |>
sf::st_cast("MULTILINESTRING")) |>
sf::st_cast("POINT") |>
ggplot()+
geom_sf(shape=3)
library(lakemetrics)
install.packages("gstat")
install.packages("ggsn")
